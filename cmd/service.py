import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
import httpx
from contextlib import asynccontextmanager
from internal.unitls.executor import executor
from internal.services.prediction.dto import GetFireRiskPredictionOut
from fastapi.params import Depends, Query
from internal.services.weather.dto import GetCurrentWeatherOut, GetCurrentByLocationIn
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from starlette.responses import FileResponse, Response
from internal.di import DI

IS_DEV = "dev" in sys.argv

# üîπ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ThreadPoolExecutor
@asynccontextmanager
async def lifespan(a: FastAPI):
    print("Starting application...")
    yield  # –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("Shutting down ThreadPoolExecutor...")
    executor.shutdown(wait=True)
    print("ThreadPoolExecutor shut down successfully.")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
app = FastAPI(lifespan=lifespan)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º React-—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/assets", StaticFiles(directory="web/dist/assets"), name="assets")
app.mount("/static", StaticFiles(directory="web/dist/static"), name="static")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
container = DI.get_instance()

# URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
DEV_FRONTEND_URL = "http://localhost:5173"

@app.get("/api/v1/weather/current", response_model=GetCurrentWeatherOut)
async def get_weather_current(
    lat: float = Query(55.7386, title="–®–∏—Ä–æ—Ç–∞", description="Latitude"),
    lon: float = Query(37.6068, title="–î–æ–ª–≥–æ—Ç–∞", description="Longitude")
):
    """
    –†–æ—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    :param lat: —à–∏—Ä–æ—Ç–∞
    :param lon: –¥–æ–ª–≥–æ—Ç–∞
    """

    weather = container.weather_service.get_current(
        params=GetCurrentByLocationIn(
            lat=lat,
            lon=lon
        )
    )
    return weather

@app.get("/api/v1/wildfire/predict", response_model=GetFireRiskPredictionOut)
async def wild_fire_predict(
    lat: float = Query(55.7386, title="–®–∏—Ä–æ—Ç–∞", description="Latitude"),
    lon: float = Query(37.6068, title="–î–æ–ª–≥–æ—Ç–∞", description="Longitude")
):
    """
    –†–æ—É—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∏—Å–∫–∞ –ø–æ–∂–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    :param lat: —à–∏—Ä–æ—Ç–∞
    :param lon: –¥–æ–ª–≥–æ—Ç–∞
    """
    weather = container.weather_service.get_current(
        params=GetCurrentByLocationIn(
            lat=lat,
            lon=lon
        )
    )

    prediction = await container.prediction_service.get_fire_risk_prediction(
        weather_data=weather
    )

    return prediction

@app.get("/{full_path:path}")
async def serve_spa(full_path: str):
    """
    –†–æ—É—Ç –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è SPA-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–¥–∞—é—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

    :param full_path: –ª—é–±–æ–π –ø—É—Ç—å –æ—Ç–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    """

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—ã–π HTML —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Ä–µ–∂–∏–º–∞
    if not IS_DEV:
        return FileResponse("web/dist/index.html")

    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    async with httpx.AsyncClient() as client:
        frontend_url = f"{DEV_FRONTEND_URL}/{full_path}"
        try:
            response = await client.get(frontend_url)
            return Response(content=response.content, status_code=response.status_code, headers=response.headers)
        except httpx.RequestError:
            return Response(content="Frontend server is not running", status_code=502)
